start                       ::= classdef_start class_start
classdef_start              ::= classdef classdef_start_rest
classdef_start_rest         ::= classdef classdef_start_rest
classdef_start_rest         ::= LAMBDA
classdef                    ::= TK_CLASSDEF TK_IDENTIFIER super classdef_body
classdef_body               ::= TK_BRACE_OPEN classdef_body_rest TK_BRACE_CLOSE
classdef_body_rest          ::= TK_IDENTIFIER classdef_ctor_or_method
classdef_body_rest          ::= primitive_type_void TK_IDENTIFIER classdef_method_rest
classdef_body_rest          ::= LAMBDA

classdef_ctor_or_method     ::= TK_IDENTIFIER classdef_method_rest
classdef_ctor_or_method     ::= classdef_ctor_rest
classdef_ctor_rest          ::= formal_args TK_SEMICOLON classdef_body_rest
classdef_method_rest        ::= formal_args TK_SEMICOLON classdef_methods
classdef_methods            ::= classdef_method classdef_methods
classdef_methods            ::= LAMBDA
classdef_method             ::= method_type TK_IDENTIFIER formal_args TK_SEMICOLON
class_start                 ::= class class_start_rest
class_start_rest            ::= class class_start_rest    
class_start_rest            ::= LAMBDA
class                       ::= TK_CLASS TK_IDENTIFIER super class_body
class_body                  ::= TK_BRACE_OPEN class_body_rest TK_BRACE_CLOSE
class_body_rest             ::= TK_IDENTIFIER class_field_ctor_or_method
class_body_rest             ::= TK_VOID TK_IDENTIFIER class_method_rest
class_body_rest             ::= primitive_type TK_IDENTIFIER class_field_or_method
class_body_rest             ::= LAMBDA
class_field_ctor_or_method  ::= TK_IDENTIFIER class_field_or_method
class_field_ctor_or_method  ::= class_ctor_rest
class_field_or_method       ::= class_var_declaration_list
class_field_or_method       ::= class_method_rest
class_var_declaration_list  ::= TK_COMMA TK_IDENTIFIER class_var_declaration_list
class_var_declaration_list  ::= TK_SEMICOLON class_body_rest
class_method_rest           ::= formal_args block class_methods
class_methods               ::= class_method class_methods
class_methods               ::= LAMBDA
class_method                ::= method_type TK_IDENTIFIER formal_args block
class_ctor_rest             ::= formal_args block class_ctor_or_method

class_ctor_or_method        ::= TK_IDENTIFIER class_ctor_or_method_rest
class_ctor_or_method        ::= primitive_type_void TK_IDENTIFIER class_method_rest 
class_ctor_or_method        ::= LAMBDA

class_ctor_or_method_rest   ::= TK_IDENTIFIER class_method_rest
class_ctor_or_method_rest   ::= class_ctor_rest
super                       ::= TK_EXTENDS TK_IDENTIFIER
super                       ::= LAMBDA
formal_args                 ::= TK_PAREN_OPEN formal_args_rest
formal_args_rest            ::= TK_PAREN_CLOSE
formal_args_rest            ::= formal_arg_list TK_PAREN_CLOSE
formal_arg_list             ::= formal_arg formal_arg_list_rest
formal_arg_list_rest        ::= TK_COMMA formal_arg formal_arg_list_rest
formal_arg_list_rest        ::= LAMBDA
formal_arg                  ::= type TK_IDENTIFIER
method_type                 ::= TK_VOID
method_type                 ::= type
type                        ::= TK_IDENTIFIER
type                        ::= primitive_type
primitive_type_void         ::= void
primitive_type_void         ::= primitive_type
primitive_type              ::= TK_BOOLEAN
primitive_type              ::= TK_CHAR
primitive_type              ::= TK_INT
primitive_type              ::= TK_STRING
block                       ::= TK_BRACE_OPEN statements TK_BRACE_CLOSE
statements                  ::= statement statements
statements                  ::= LAMBDA
statement                   ::= closed_statement
statement                   ::= open_statement
open_statement              ::= TK_IF    TK_PAREN_OPEN expression TK_PAREN_CLOSE statement
open_statement              ::= TK_IF    TK_PAREN_OPEN expression TK_PAREN_CLOSE closed_statement TK_ELSE open_statement
open_statement              ::= TK_FOR   TK_PAREN_OPEN expression TK_SEMICOLON expression TK_SEMICOLON expression TK_PAREN_CLOSE open_statement
open_statement              ::= TK_WHILE TK_PAREN_OPEN expression TK_PAREN_CLOSE open_statement
closed_statement            ::= TK_IF    TK_PAREN_OPEN expression TK_PAREN_CLOSE closed_statement TK_ELSE closed_statement
closed_statement            ::= TK_FOR   TK_PAREN_OPEN expression TK_SEMICOLON expression TK_SEMICOLON expression TK_PAREN_CLOSE closed_statement
closed_statement            ::= TK_WHILE TK_PAREN_OPEN expression TK_PAREN_CLOSE closed_statement
closed_statement            ::= simple_statement
simple_statement            ::= TK_SEMICOLON
simple_statement            ::= TK_RETURN statement_return_rest
simple_statement            ::= block
simple_statement            ::= expression
statement_return_rest       ::= TK_SEMICOLON
statement_return_rest       ::= expression TK_SEMICOLON
expression                  ::= assignment_expr
assignment_expr             ::= TK_ASSIGNMENT expression
assignment_expr             ::= LAMBDA
logical_expr                ::= logical_or_expr logical_expr_rest
logical_expr_rest           ::= logical_expr
logical_expr_rest           ::= LAMBDA
logical_or_expr             ::= logical_and_expr logical_or_expr_rest
logical_or_expr_rest        ::= TK_OR logical_or_expr
logical_or_expr_rest        ::= LAMBDA
logical_and_expr            ::= equality_expr logical_and_expr_rest
logical_and_expr_rest       ::= TK_AND logical_and_expr
logical_and_expr_rest       ::= LAMBDA
equality_expr               ::= relational_expr equality_expr_rest
equality_expr_rest          ::= TK_EQUALS    equality_expr
equality_expr_rest          ::= TK_NOTEQUALS equality_expr
equality_expr_rest          ::= LAMBDA
relational_expr             ::= term_expr relational_expr_rest
relational_expr_rest        ::= TK_LT   relational_expr
relational_expr_rest        ::= TK_GT   relational_expr
relational_expr_rest        ::= TK_LTEQ relational_expr
relational_expr_rest        ::= TK_GTEQ relational_expr
relational_expr_rest        ::= LAMBDA
term_expr                   ::= factor_expr term_expr_rest
term_expr_rest              ::= TK_ADD term_expr
term_expr_rest              ::= TK_SUB term_expr
term_expr_rest              ::= LAMBDA
factor_expr                 ::= unary_expr factor_expr_rest
factor_expr_rest            ::= TK_MUL factor_expr
factor_expr_rest            ::= TK_DIV factor_expr
factor_expr_rest            ::= TK_MOD factor_expr
factor_expr_rest            ::= LAMBDA
unary_expr                  ::= TK_ADD unary_expr
unary_expr                  ::= TK_SUB unary_expr
unary_expr                  ::= TK_NOT unary_expr
unary_expr                  ::= primary
primary                     ::= literal primary_rest
primary                     ::= TK_PAREN_OPEN expression TK_PAREN_CLOSE primary_rest
primary                     ::= TK_NEW TK_IDENTIFIER actual_args primary_rest
primary                     ::= TK_SUPER TK_PERIOD TK_IDENTIFIER actual_args primary_rest
primary                     ::= TK_THIS primary_rest_this primary_rest
primary                     ::= TK_IDENTIFIER primary_rest_id primary_rest
primary_rest                ::= TK_PERIOD TK_IDENTIFIER actual_args primary_rest
primary_rest                ::= LAMBDA
primary_rest_this           ::= TK_PERIOD TK_IDENTIFIER
primary_rest_this           ::= LAMBDA
primary_rest_id             ::= actual_args
primary_rest_id             ::= LAMBDA
literal                     ::= TK_NULL
literal                     ::= TK_TRUE
literal                     ::= TK_FALSE
literal                     ::= TK_INT_LITERAL
literal                     ::= TK_CHAR_LITERAL
literal                     ::= TK_STRING_LITERAL
actual_args                 ::= TK_PAREN_OPEN actual_args_rest
actual_args_rest            ::= TK_PAREN_CLOSE
actual_args_rest            ::= expr_list TK_PAREN_CLOSE
expr_list                   ::= expression expr_list_rest
expr_list_rest              ::= TK_COMMA expr_list
expr_list_rest              ::= LAMBDA
